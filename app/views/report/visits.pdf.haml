:css
  table {
      border-collapse: collapse !important;
  }

  table, th, td {
      border: 1px solid black !important;
  }

  table {
      font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif !default;
      font-size: 11px;
      color:#333333;
      border-width: 1px;
      border-color: #666666;
  }
  table th {
      border-width: 1px;
      // padding: 4px;
      border-style: solid;
      border-color: #666666;
      font-weight:bold;

  }
  table td {
      border-width: 1px;
      padding: 3px;
      border-style: solid;
      border-color: #666666;
      background-color: #ffffff;
  }

  table {
      width: 100%;
  }

  th {
      height: 25px;
  }

  td, th {
    text-align: center;
  }
  th {
      color: white;
      background-color: #2980b9;
  }
  thead { 
    display: table-header-group; 
  }
  tfoot { 
    display: table-row-group; 
  }
  tr { 
    page-break-inside: avoid !important;
  }

= wicked_pdf_image_tag("logo-icon.png", class:'icon main-logo')
%h2 Reporte de Metricas
%h3
  Ciclo -
  = Cycle.find(params[:cycle_id]).name
%h5{:style => "text-align: right;"} 
  Fecha de reporte: 
  = Time.now.to_date.strftime('%d-%m-%Y')

%table.ui.sortable.celled.table.striped.blue.gridtable
  %thead
    %tr
      %th Usuario
      %th Total de Visitas Actuales
      %th Visitas Realizadas
      %th Visitas Por Realizar
      %th % de MÃ©trica Cumplida   
  %tbody
    - @users.each do |user|
      - next if user.id == 1
      - next if !user.is_active
      %tr
        %td= user.username
        -# - byebug
        -# %td= user.plannings.count
        %td= Planning.includes(:doctor).where(drugstore: nil, user_id: user.id).count  
        -# %td= user.visits.where(cycle: Cycle.find(@cycle.id).name).count
        %td= Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, user_id: user.id, visits: {cycle: Cycle.find(@cycle_id).name}).count
        -# -byebug  
        -# %td= user.plannings.where(visited: false).count 
        %td= Planning.includes(:doctor, :visits).where(drugstore: nil, visited: false, user_id: user.id).count

        -# %td= number_to_percentage((user.visits.where(cycle: @cycle.name).count.to_f / user.plannings.count.to_f)*100, precision: 0)
        %td     
          .progress-bar.ui.teal.progress.small{"data-percent" => "#{number_to_percentage((Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, user_id: user.id, visits: {cycle: Cycle.find(@cycle_id).name}).count.to_f / Planning.includes(:doctor).where(user_id: user.id).count.to_f)*100, precision: 0)}"}
            .bar
            .label 
              - if ((Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, user_id: user.id, visits: {cycle: Cycle.find(@cycle_id).name}).count.to_f / Planning.includes(:doctor, :visits).where(visited: false, user_id: user.id).count.to_f)*100).nan?
                0 %
              - else  
                = number_to_percentage((Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, user_id: user.id, visits: {cycle: Cycle.find(@cycle_id).name}).count.to_f / Planning.includes(:doctor).where(drugstore: nil, user_id: user.id).count.to_f)*100, precision: 0)
    - if current_user.admin
      %tfoot
        %tr.warning
          %td
            -# = @users.where(is_active: true, admin: false).count
            Totales
          %td
            = Planning.includes(:doctor, :user).where(drugstore: nil, :users => {is_active: true}).count 
          %td
            = Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, visits: {cycle: Cycle.last.name}).count
          %td
            = Planning.includes(:doctor, :visits, :user).where(drugstore: nil, visited: false, :users => {is_active: true}).count
          %td
            .progress-bar.ui.teal.progress.small{"data-percent" => "#{number_to_percentage((Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, visits: {cycle: Cycle.last.name}).count.to_f / Planning.includes(:doctor, :user).where(drugstore: nil, :users => {is_active: true}).count.to_f)*100, precision: 0)}"}
              .bar
              .label 
                - if ((Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, visits: {cycle: Cycle.last.name}).count.to_f / Planning.includes(:doctor, :visits, :user).where(visited: false, :users => {is_active: true}).count.to_f)*100).nan?
                  0 %
                - else  
                  = number_to_percentage((Planning.includes(:doctor, :visits).where(drugstore: nil, visited: true, visits: {cycle: Cycle.last.name}).count.to_f / Planning.includes(:doctor, :user).where(drugstore: nil, :users => {is_active: true}).count.to_f)*100, precision: 0)




  -# %tbody
  -#   - @users.each do |user|
  -#     - next if user.id == 1
  -#     %tr
  -#       %td= user.username
  -#       %td= user.visits.where(cycle: Cycle.find(params[:cycle_id]).name).count
  -#       %td= user.plannings.where(visited: false).count
  -#       %td= user.plannings.count 
  -#       - if ((user.visits.where(cycle: Cycle.find(params[:cycle_id]).name).count.to_f / user.plannings.count.to_f)*100).nan?
  -#         %td 0 %
  -#       - else
  -#         %td= number_to_percentage((user.visits.where(cycle: Cycle.find(params[:cycle_id]).name).count.to_f / user.plannings.count.to_f)*100, precision: 0)  








            
%br 

-# %table.ui.sortable.celled.table.striped.blue.gridtable
-#   %thead
-#     %tr
-#       %th Usuario
-#       %th Doctor
-#       %th Centro
-#       %th Fecha de Visita  
-#   %tbody
-#     - @visits.each do |visit|
-#       - next if visit.user.id == 1
-#       %tr
-#         %td= visit.user.username
-#         %td= "#{visit.planning.doctor.firstname} #{visit.planning.doctor.lastname}"
-#         %td= visit.planning.doctor.center.name if visit.planning.doctor.center != nil
-#         %td= visit.created_at.strftime("%d/%m/%Y")  
